公司的项目一般都是托管到GIT仓库中的（GITHUB/GITLAB/...），而我们的项目都是需要引用第三方模块来实现的（也就是基于NPM安装很多模块）；基于NPM安装的模块会在本地项目node_modules文件夹中，这个文件特别的大，上传GIT平台的时候会忽略这个文件夹的上传
1. 忽略GIT上传的文件
.gitignore
   
2. 在其他同事下载下来代码后，项目中缺少node_modules或者缺少最新安装的模块，此时我们需要做的第一件事情就是 “跑环境”【安装当前项目需要依赖的模块】
   项目中一定有一个文件  package.json ，在文件中存在  dependencies/devDependencies 生产或者开发依赖
   跑环境的命令：$ npm install  ，这样就会按照依赖清单把所有本地没有但是需要的模块安装一遍（而且在 package.json 中指定了需要用到的模块版本）
   $ npm install --production  只安装生产依赖的模块【用于服务器部署的时候】

3. 生成package.json
  $ npm init -y   【要求文件目录名字不能出现中文/大写字母/特殊字符】
  安装模块的时候
  $ npm install xxx@xxx.xx  这样处理，默认就会把安装模块的信息防止到package.json生产依赖中，类似于 $  npm install xxx@xxx.xx --save
  $ npm install xxx@xxx.xx --save-dev  安装模块的同时，防止到开发依赖中

  生产依赖：项目部署到服务器上也需要依赖的模块
  开发依赖：只有在开发的时候依赖的模块，项目上线是不需要安装的，例如：less，开发时候需要此模块把编写的less文件编译为CSS，项目打包上线用到的是css文件，那么生产环境是不需要在基于less编译的

===================

接下来我带着大家做的实战项目基本上都是有后台的（后台是基于NODE+EXPRESS开发），我们做项目之前，需要先把后台程序跑起来
1. 安装各种依赖
2. 启动后台服务：$ node server.js
   1)提示 THE WEB SERVER ... 这些话的时候，说明服务启动成功
   2)提示 address alerady in use 0:0:0:9999 类似这样的错误，说明当前服务端口号被其它程序占用，我们需要先改一下端口号在去重新启动【我们到config.js中修改PORT，取值范围 0~65535之间，修改成为一个没有被占用的端口号后，重新 $ node server.js】
   3)启动完成服务后，当前命令终端窗口不能关掉，关掉服务就挂掉了【真实项目部署的时候，我们可以基于PM2的模块，在进程池中管理服务，此时可以关掉窗口】

====================

真实项目中，后台开发人员会把自己开发的后台功能，写一份供客户端调取使用的API接口文档
=> API Application Programming Interface 应用程序接口：凡是能被别人调取使用的都可以被称为API，例如：我们想要向服务器发请求，从服务器获取或者给服务器推送数据，那么如何请求，客户端传递哪些信息，服务器会返回哪些信息，后台都会编写成为一个API接口文档

1. 获取用户列表
GET /queryList
PARAMS  【你需要传递给服务器的】
   limit  每页展示的条数（默认值10）
   page  当前页码（默认值1）
   search  搜索的关键字（默认值空字符串）
RETURN
   {
       code:0,  请求结果状态码  0成功 1失败 2xxx
       codeText:'',  对请求结果状态码的描述  
       params:{...},  客户端传递给服务器的信息【真实项目中一般没有这个】
       data:[{
          id:1,  用户编号
          name:'', 用户名
          age:11 年纪
       },...]
   }

code的特殊说明：真实项目中，一般我们的请求都会以200(HTTP状态码)的形式返回[也就是正常情况下，我们向服务器发请求，服务器都会返回结果，但是也有可能会出现请求发送不过去(4开头)，再或者服务器无法响应(5开头)，遇到这种状态码，请求是失败的]；但是即使是以200返回的数据，也不一定代表拿到了最后想要的结果(只能说明拿到了数据，但是不一定是你想要的)；所以此时在返回的数据中一般都标识code，用来进一步告知客户端是否成功获取到了最终想要的结果；

2. 新增用户信息
POST /insertInfo
PARAMS：application/x-www-form-urlencode  接口中会声明POST请求传递给服务器的数据格式
   name
   age
   sex
   ...
RETURN
   {
       code:0, 
       codeText:'', 
       params:{...}
   }

接口测试或者接口联调（客户端和服务器端把数据交互跑通：跨域的处理、POST-MAN、自己代码中发送AJAX请求测试...）

==========================

测试本地或者服务器接口的时候，接口文档中给的是具体地址，我们需要补齐前缀
本地测试：http://localhost:9999 或者 http://127.0.0.1:9999
服务器测试：找后台要类似的前缀信息